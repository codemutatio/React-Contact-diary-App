{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Footer","Content","Column","Table","ColumnGroup","ContactApp","handleSubmit","e","preventDefault","form","props","dataSource","state","validateFields","err","fieldsValue","value","birthday","format","key","shortid","generate","push","resetFields","getFieldDecorator","this","className","labelCol","sm","span","xs","wrapperCol","onSubmit","Item","label","rules","message","required","whitespace","placeholder","initialValue","min","max","offset","type","htmlType","title","dataIndex","Component","Form","create","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a3cbac3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Button, Input, Layout, Table, DatePicker, Form, InputNumber\n} from 'antd';\nimport shortid from 'shortid';\nimport './App.css';\n\nconst dateFormat = 'YYYY/MM/DD';\n\nconst { Header, Footer, Content } = Layout;\nconst { Column, ColumnGroup } = Table;\n\nclass ContactApp extends Component {\n    constructor() {\n        super();\n        this.state = {\n            dataSource: [],\n        };\n    }\n\n    handleSubmit = e => {\n      e.preventDefault();\n      const { form } = this.props;\n      const { dataSource } = this.state;\n      form.validateFields((err, fieldsValue) => {\n          if (err) {\n              return;\n          }\n\n          const value = {\n              ...fieldsValue,\n              birthday: fieldsValue.birthday.format('DD-MM-YYYY'),\n              key: shortid.generate(),\n          };\n\n          dataSource.push(value);\n          form.resetFields();\n      });\n  }\n\n  render() {\n      const { form } = this.props;\n      const { getFieldDecorator } = form;\n      const formItemLayout = {\n          labelCol: {\n              sm: { span: 10 },\n              xs: { span: 20 },\n          },\n          wrapperCol: {\n              sm: { span: 5 },\n              xs: { span: 10 },\n          },\n      };\n      const tailFormItemLayout = {\n          wrapperCol: {\n              sm: {\n                  offset: 8,\n                  span: 10,\n              },\n              xs: {\n                  offset: 0,\n                  span: 5,\n              },\n          },\n      };\n      return (\n          <Layout className=\"App\">\n              <Header className=\"App-header\">\n                  <h1>Contact Diary</h1>\n              </Header>\n              <Content className=\"App-content\">\n                  <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n                      <Form.Item label=\"First Name\">\n                          {getFieldDecorator('firstName', {\n                              rules: [{\n                                  message: 'Please input your friend\\'s Firstname!',\n                                  required: true,\n                                  whitespace: true,\n                              }],\n                          })(<Input />)}\n                      </Form.Item>\n                      <Form.Item label=\"Last Name\">\n                          {getFieldDecorator('lastName', {\n                              rules: [{\n                                  message: 'Please input your friend\\'s Lastname!',\n                                  required: true,\n                                  whitespace: true,\n                              }],\n                          })(<Input />)}\n                      </Form.Item>\n                      <Form.Item label=\"Birthday\">\n                          {getFieldDecorator('birthday', {\n                              rules: [{\n                                  message: 'Please input your friend\\'s Birthday!',\n                                  required: true,\n                              }],\n                          })(<DatePicker placeholder=\"Select your friend\\'s Birthday\" format={dateFormat} />)}\n                      </Form.Item>\n                      <Form.Item label=\"Age\">\n                          {getFieldDecorator('age', {\n                              rules: [{\n                                  message: 'Please input your friend\\'s Age!',\n                                  required: true,\n                              }],\n                          }, { initialValue: 0 })(<InputNumber min={1} max={100} />)}\n                      </Form.Item>\n                      <Form.Item label=\"Hobbies\">\n                          {getFieldDecorator('hobbies', {\n                              rules: [{\n                                  message: 'Please input your friend\\'s hobbies',\n                                  required: true,\n                                  whitespace: true,\n                              }],\n                          })(<Input />)}\n                      </Form.Item>\n                      <Form.Item {...tailFormItemLayout}>\n                          <Button type=\"primary\" htmlType=\"submit\">\n                Add Contact\n                          </Button>\n                      </Form.Item>\n                  </Form>\n                  <Table dataSource={this.state.dataSource}>\n                      <ColumnGroup title=\"Name\">\n                          <Column\n                              title=\"First Name\"\n                              dataIndex=\"firstName\"\n                              key=\"firstName\"\n                          />\n                          <Column\n                              title=\"Last Name\"\n                              dataIndex=\"lastName\"\n                              key=\"lastName\"\n                          />\n                      </ColumnGroup>\n                      <Column\n                          title=\"Age\"\n                          dataIndex=\"age\"\n                          key=\"age\"\n                      />\n                      <Column\n                          title=\"Birthday\"\n                          dataIndex=\"birthday\"\n                          key=\"birthday\"\n                      />\n                      <Column\n                          title=\"Hobbies\"\n                          dataIndex=\"hobbies\"\n                          key=\"hobbies\"\n                      />\n                  </Table>\n              </Content>\n              <Footer className=\"App-footer\">&copy; My Contact Diary</Footer>\n          </Layout>\n      );\n  }\n}\n\nexport default Form.create()(ContactApp);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}